# Welcome to the example program file for Best-of-Many.
# This is a comment because of the leading #.

# Whitespace is okay too.

# The first five lines determine if the corresponding algorithms will be run.
# SWAPROUND applies to both Column Generation and Edge-Splitting.
CHRISTOFIDES:TRUE
MAX_ENTROPY:TRUE
COLUMN_GENERATION:TRUE
EDGE_SPLITTING:TRUE
SWAPROUND:TRUE
# Any value other than TRUE will be considered FALSE.
# When one of the above lines is ommitted, the variable defaults to TRUE.
# (so the five lines above are functionally irrelevant)

# This is the number of samples to do for each of the sample-based algorithms.
# The default is 100 if no count is provided. A malformed count might crash
# the program.
SAMPLE_COUNT:100

# These two constants determine how Column Generation cutoff is done.
# Column Generation halts when the total improvement over the last
# CG_HISTORY_SIZE iterations is less than CG_EPSILON.
# The values here are the defaults. A malformed input might crash the program.
CG_EPSILON:0.1
CG_HISTORY_SIZE:100

# These three arguments determine what is done with the output of the program.
# If SAVE_PLOTS is TRUE, some visualization files (in custom file-formats) will
# be generated. The files can be read be view_cg_plot.py and view_histogram.py.
# If SAVE_SPREADSHEET is TRUE, a csv spreadsheet with the results of the
# program will be generated. This is the main way to get data out of the program.
# If SAVE_LOG_FILES is TRUE, some log files generated by best-of-many and
# concorde will be saved.
SAVE_PLOTS:FALSE
SAVE_SPREADSHEET:TRUE
SAVE_LOG_FILES:FALSE

# This is the instances section. Every instance must be accompanied by the
# optimal tour cost.*
# If the optimal isn't known the dependency concorde.exe can calculate it.
# Alternatively, just supply a value of 1; the error% statistics in the
# spreadsheet will be off, but the algorithms will run normally.

# The instances line is mandatory and must be exactly as it is below.
INSTANCES:

# Use Unix-style relative paths for the instance locations:
../instances/berlin52.tsp 7542
../instances/pr439.tsp 107217

# The paths are relative to the location of the program file.
# When running the program, use a Unix-style relative path for the
# location of the program file as well.

# *DISCLAIMER: I understand the irony of requiring the optimal solution as
# part of the input to the program.
