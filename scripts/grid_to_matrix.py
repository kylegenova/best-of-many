# This script is for converting a 2D Euclidean TSPLIB file to a LDR-Matrix TSPLIB file
import argparse
import math
parser = argparse.ArgumentParser(description='Convert to a TSPLIB Cost Matrix formatted file.')
parser.add_argument('fname', help='The file name to convert')
args = parser.parse_args()
f = args.fname
fout = f[:len(f)-4] + 'LDR.tsp'
assert f[len(f)-4:len(f)] == '.tsp', 'Error: file must be of type tsp'
f = open(f, 'r')
s = f.read()
f.close()
desc,data = s.split('NODE_COORD_SECTION',1)
data = data[1:]
arr = data.split('\n')
arr = filter(lambda x: x != 'EOF' and x != '', arr)
arr = map(lambda x: x.split(' '), arr)
arr = map(lambda c: filter(lambda x: x != '', c), arr)
arr = map(lambda x: map(lambda y: int(y), x), arr)
arr = map(lambda x: [x[1], x[2]], arr)
out = []
for i in range(0, len(arr)):
    out.append([])
    for j in range(0, len(arr)):
        out[i].append(int(math.sqrt((arr[i][0] - arr[j][0])**2 + (arr[i][1] - arr[j][1])**2) + .5))
maxDistDigits = len(str(max(map(max, out)))) + 1
res = []
for line in out:
    c = map(lambda x : ' '*(maxDistDigits - len(str(x))) + str(x), line)
    c = reduce(lambda a,b: a + b, c)
    res.append(c)
res = map(lambda x: x.split(' 0 ')[0] + ' 0 ', res)
res[len(res)-1] = res[len(res)-1][:len(res[len(res)-1])-2]
res = map(lambda x: x[1:len(x)-1],res)
res = reduce(lambda a,b,: a + '\n' + b, res)
desc = desc.split('\n')
desc = map(lambda x: x.split(' : '), desc)
name = filter(lambda x: x[0] == 'NAME', desc)[0]
dim = filter(lambda x: x[0] == 'DIMENSION', desc)[0]
comment = filter(lambda x: x[0] == 'COMMENT', desc)
comment.append(['COMMENT', 'THIS INSTANCE WAS GENERATED BY TSPCONVERT.PY'])
typ = ['TYPE', 'TSP']
ewt = ['EDGE_WEIGHT_TYPE', 'EXPLICIT']
ewf = ['EDGE_WEIGHT_FORMAT', 'LOWER_DIAG_ROW']
desc = [name] + comment + [typ,dim,ewt,ewf]
desc = map(lambda x: x[0] + ' : ' + x[1], desc)
desc.append('EDGE_WEIGHT_SECTION\n')
desc = reduce(lambda a,b: a + '\n' + b, desc)
f = open(fout, 'w')
f.write(desc+res+'\nEOF\n')
f.close()
